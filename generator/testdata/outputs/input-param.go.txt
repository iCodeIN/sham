// Code generated by sham. DO NOT EDIT.
// https://github.com/jmalloc/sham

package outputs

import inputs "github.com/jmalloc/sham/generator/testdata/inputs"

// InputParam is a test implementation of the inputs.InputParam interface.
type InputParam struct {
	// InputParam is the default implementation of the interface.
	// If it is nil, each method will return an error (or panic).
	inputs.InputParam

	// AnonFunc is an implementation of the Anon() method.
	// If it is non-nil, it takes precedence over the embedded InputParam interface.
	AnonFunc func(int, string)

	// SingleFunc is an implementation of the Single() method.
	// If it is non-nil, it takes precedence over the embedded InputParam interface.
	SingleFunc func(int)

	// MultipleFunc is an implementation of the Multiple() method.
	// If it is non-nil, it takes precedence over the embedded InputParam interface.
	MultipleFunc func(int, string)

	// MultipleNamesFunc is an implementation of the MultipleNames() method.
	// If it is non-nil, it takes precedence over the embedded InputParam interface.
	MultipleNamesFunc func(int, int, string, string)

	// VariadicFunc is an implementation of the Variadic() method.
	// If it is non-nil, it takes precedence over the embedded InputParam interface.
	VariadicFunc func(...int)
}

func (stub *InputParam) Anon(arg0 int, arg1 string) {
	if stub.AnonFunc != nil {
		stub.AnonFunc(arg0, arg1)
	}

	if stub.InputParam != nil {
		stub.InputParam.Anon(arg0, arg1)
	}
}

func (stub *InputParam) Single(v int) {
	if stub.SingleFunc != nil {
		stub.SingleFunc(v)
	}

	if stub.InputParam != nil {
		stub.InputParam.Single(v)
	}
}

func (stub *InputParam) Multiple(a int, b string) {
	if stub.MultipleFunc != nil {
		stub.MultipleFunc(a, b)
	}

	if stub.InputParam != nil {
		stub.InputParam.Multiple(a, b)
	}
}

func (stub *InputParam) MultipleNames(a, b int, c, d string) {
	if stub.MultipleNamesFunc != nil {
		stub.MultipleNamesFunc(a, b, c, d)
	}

	if stub.InputParam != nil {
		stub.InputParam.MultipleNames(a, b, c, d)
	}
}

func (stub *InputParam) Variadic(args ...int) {
	if stub.VariadicFunc != nil {
		stub.VariadicFunc(args...)
	}

	if stub.InputParam != nil {
		stub.InputParam.Variadic(args...)
	}
}
